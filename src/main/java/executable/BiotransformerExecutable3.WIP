package executable;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.MissingArgumentException;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.openscience.cdk.CDKConstants;
import org.openscience.cdk.DefaultChemObjectBuilder;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.interfaces.IAtomContainerSet;
import org.openscience.cdk.interfaces.IChemObjectBuilder;
import org.openscience.cdk.io.SDFWriter;
import org.openscience.cdk.silent.SilentChemObjectBuilder;
import org.openscience.cdk.smiles.SmiFlavor;
import org.openscience.cdk.smiles.SmilesGenerator;
import org.openscience.cdk.smiles.SmilesParser;

import biotransformer.biosystems.BioSystem.BioSystemName;
import biotransformer.btransformers.Biotransformer;
import biotransformer.btransformers.Biotransformer.bType;
import biotransformer.btransformers.Cyp450BTransformer;
import biotransformer.btransformers.ECBasedBTransformer;
import biotransformer.btransformers.EnvMicroBTransformer;
import biotransformer.btransformers.HGutBTransformer;
import biotransformer.btransformers.Phase2BTransformer;
import biotransformer.btransformers.SimulateHumanMetabolism;
/*
import biotransformer.railsappspecific.AbioticTransformer_rails;
import biotransformer.railsappspecific.BiotransformerSequence_rails;
import biotransformer.railsappspecific.Cyp450BTransformer_rails;
import biotransformer.railsappspecific.ECBasedBTransformer_rails;
import biotransformer.railsappspecific.EnvMicroBTransformer_rails;
import biotransformer.railsappspecific.HGutBTransformer_rails;
import biotransformer.railsappspecific.PhaseIIBTransformer_rails;
import biotransformer.railsappspecific.SimulateHumanMetabolism_rails;
 */
import biotransformer.transformation.Biotransformation;
import biotransformer.utils.BiotransformerSequence;
import biotransformer.utils.ChemStructureExplorer;
import biotransformer.utils.FileUtilities;
import biotransformer.utils.MetaboliteFinder;
import biotransformer.utils.MetaboliteFinder.FinderOption;
import biotransformer.utils.UniversalBioTransformer;



public class BiotransformerExecutable3 {
	
	public static final Double version = SetupParameters.version;
	public BiotransformerExecutable3() {
		SetupParameters.setOptionsTobType();		
	}	
		
	
	public static void main(String[] args) throws Exception{
		long start =System.currentTimeMillis();
		IChemObjectBuilder 	builder = SilentChemObjectBuilder.getInstance();
		SmilesParser	smiParser		= new SmilesParser(builder);

		Options options = SetupParameters.generateOptions();
		CommandLine commandLine = SetupParameters.generateCommandLine(options, args);
		IAtomContainer singleInput = null;
		String inputFileName = null;
		int nrOfSteps = 1;
		
		boolean annotate = false;
		String masses = null;
		String formulas = null;
		String metadata_input = null;
		Double defaultMassToleranceThreshold = 0.01;
		Double massToleranceThreshold = null;
		String task = null;
		FinderOption opt = null;
		String iFormat = null;
		String oFormat = null;
		String outputF = null;
		BiotransformerSequence_rails biotransformerSeqeuence = null;
		BiotransformerSequence btq_for_mf = null;		
		double scoreThreshold = 0.5;
		int cyp450Mode = 1;
		int p2Mode = 1;
		boolean useDB = true;
		boolean useSub = false;
		
		int number_of_molecules = 0;
		int successful_predictions = 0;
		
		Double massThreshold = 1500.0;
		// Setting up the OptionsTobType hash map
		SetupParameters.setOptionsTobType();
		if(Arrays.asList(args).contains("-h")) return;
		
		if(Arrays.asList(args).contains("-useDB")) {
			if(commandLine.getOptionValue("useDB").trim().equalsIgnoreCase("true")) {
				useDB = true;
			}
			else if(commandLine.getOptionValue("useDB").trim().equalsIgnoreCase("false")) {
				useDB = false;
			}
			else throw new Exception("You selected the useDB feature, please input either true or false as the argument for the -useDB parameter");
		}
		
		if(Arrays.asList(args).contains("-useSub")) {
			if(commandLine.getOptionValue("useSub").trim().equalsIgnoreCase("true")) {
				useSub = true;
			}
			else if(commandLine.getOptionValue("useSub").trim().equalsIgnoreCase("false")) {
				useSub = false;
			}
			else throw new Exception("You selected the useDB feature, please input either true or false as the argument for the -useDB parameter");
		}
		if(Arrays.asList(args).contains("-a") || Arrays.asList(args)
				.contains("--annotate")){		
			annotate = true;
			
			System.out.println("\n\n=============================================================");
			System.out.println("Compounds will be annotated using the PubChem API. Make sure");
			System.out.println("to have a secure internect connection.");
			System.out.println("=============================================================\n");
		}
		
		if(Arrays.asList(args).contains("-ismi") || Arrays.asList(args)
				.contains("--ismiles")){
			iFormat = "smi";
		}
		else if(Arrays.asList(args).contains("-icsv") || Arrays.asList(args).contains("--icsv")) {
			iFormat = "csv";
		}
		else if(Arrays.asList(args).contains("-imol") || Arrays.asList(args)
				.contains("--sdfinput")){
			iFormat = "mol";
		}
		else if(Arrays.asList(args).contains("-isdf") || Arrays.asList(args)
				.contains("--sdfinput")){
			iFormat = "sdf";
		}
				
		if(Arrays.asList(args).contains("-ocsv") || Arrays.asList(args)
				.contains("--csvoutput")){
			oFormat = "csv";
			outputF = commandLine.getOptionValue("ocsv").trim();
		}
		else if(Arrays.asList(args).contains("-osdf") || Arrays.asList(args)
				.contains("sdfoutput")){
			oFormat = "sdf";
			outputF = commandLine.getOptionValue("osdf").trim();
		}		
		
		if(commandLine !=null){
			if(commandLine.getOptionValue("multiThread") != null){
				//numCores, inputfile, time_max, cyp450Mode, iteration, useDB
				//Example: -multiThreadOption 1 inputSmilesBatch_01.csv 36000 3 2 true
				String[] args_multiThread = commandLine.getOptionValue("multiThread").split(" ");
				BiotransformerMultiThread.runMultiThread(args_multiThread);
				return;
			}
			String cyp450mode_string = commandLine.getOptionValue("cm");
			if(cyp450mode_string != null && !cyp450mode_string.isEmpty() && !cyp450mode_string.equals("")){
//				System.out.println("mode.trim() = " + mode.trim() + "\n");
				cyp450Mode = Integer.parseInt(cyp450mode_string.trim());
				System.out.println("Cyp450Mode = " + cyp450Mode);
			}
			
			String p2mode_string = commandLine.getOptionValue("pm");
			if(p2mode_string != null && !p2mode_string.isEmpty() && !p2mode_string.equals("")) {
				p2Mode = Integer.parseInt(p2mode_string.trim());
				System.out.println("PhaseIIMode = " + p2Mode);
			}
			String massThreshold_string = commandLine.getOptionValue("mt");	
			if(massThreshold_string != null && !massThreshold_string.isEmpty() && !massThreshold_string.equals("")) {
				massThreshold = Double.parseDouble(massThreshold_string);
				System.out.println("Mass threshold = " + massThreshold);
			}
			if(commandLine.getOptionValue("k") != null){
				task = commandLine.getOptionValue("k").trim();
				if( !(task.contentEquals("pred") || task.contentEquals("cid")) ){
					throw new IllegalArgumentException("Invalid task(\"" +  task + "\") entered. Enter either 'pred' (prediction) or 'cid' (compound identification)");
				}				
			}
			else {
				throw new IllegalArgumentException("\n\tThe task type is missing. You must select either 'pred' (prediction) or 'cid' (compound identification)");
			}

			if(commandLine.getOptionValue("m") != null){
				masses = commandLine.getOptionValue("m").trim();
				if(masses.length() == 0){
					throw new MissingArgumentException("\n\tPlease enter a list of monoisotopic masses.");
				}			
//				System.out.println("MASS: " + masses);
			}
			
			if(commandLine.getOptionValue("f") != null){
				formulas = commandLine.getOptionValue("f").trim();
				if(formulas.length() == 0){
					throw new MissingArgumentException("\n\tPlease enter a list of chemical formulas.");
				}			
//				System.out.println("MASS: " + masses);
			}
			
//			System.out.println("ANNOTATE: " + annotate);
			if(task.contentEquals("cid")){
				if(commandLine.getOptionValue("t") != null){
					if(commandLine.getOptionValue("t").trim().length() == 0){
						throw new MissingArgumentException("\n\tThe option '-t' was used but the mass tolerance threshold is missing. Add a value or omit '-t' to use the default value (" + defaultMassToleranceThreshold +")");
					}
					else{
						massToleranceThreshold = Double.valueOf(commandLine.getOptionValue("t").trim());	
//						System.out.println("massTolerance: " + massTolerance);
					}
				}
					
				if(masses == null && formulas == null){
					throw new IllegalArgumentException("\n\tIdentification metadata are missing. Please add a list of masses (-m) or a list of formulas (-r)");
				}
				else if(formulas != null) {
					if(masses != null) {
						throw new IllegalArgumentException("\tList of masses and formulas provided. Please exclusively provide either a list of masses (-m) or a list of formulas (-r)");											
					}
					else if(massToleranceThreshold != null) {
						throw new IllegalArgumentException("\n\tA mass tolerance threshold is accepted only for mass-based, and not formula-based identification tasks. Please remove this argument.");											
						
					}
					opt = FinderOption.FORMULA;
					metadata_input = formulas;
//					System.out.println(opt + "\t" + metadata_input);
					/**
					 * Here, there user has not provided a mass threshold tolerance, but we set it to the default, just to avoid the NullPointerException
					 * The massToleranceThreshold argument will not be used for the FORMULA option.
					 */
					massToleranceThreshold = defaultMassToleranceThreshold;
				}
				else if(masses != null){
					opt = FinderOption.MASS;
					metadata_input = masses;
					if(massToleranceThreshold == null) {
						massToleranceThreshold = defaultMassToleranceThreshold;
					}
				}
			}

			final String biotransformerType = commandLine.getOptionValue("b");
			
			if(commandLine.getOptionValue("s") != null){
				nrOfSteps = Integer.valueOf(commandLine.getOptionValue("s"));
//				System.out.println("nrOfSteps: " + nrOfSteps);
			}	
			
			String bseq = commandLine.getOptionValue("q");
			if(bseq != null) {
				if(bseq.contentEquals("")) {
					throw new IllegalArgumentException("\n\tIllegalArgumentException. Please provide a valid biotranformer sequence.");				
				}
				else if(bseq.length()>1) {
					biotransformerSeqeuence = new BiotransformerSequence_rails(bseq, useDB, useSub);
					btq_for_mf = new BiotransformerSequence(bseq, useDB, useSub);
				}		
			}
			
			if(biotransformerType != null) {
				if(! SetupParameters.optionsToBtTypes.containsKey(biotransformerType.toLowerCase())) {
					throw new IllegalArgumentException("IllegalArgumentException: The biotransformer type is invalid. Select between allHuman, cyp450, ecbased, env, hgut, phaseII, and superbio");			
				}
				if(commandLine.getOptionValue("q") != null) {
					throw new IllegalArgumentException("IllegalArgumentException: The parameters '-b' and '	' are mutually "
							+ "exclusive. While '-b' describes a specific biotransformer type, '-q' describes an order sequence of biotransformers to be applied.");
				}
			}
			
			else if(biotransformerType == null && commandLine.getOptionValue("q") == null){
				throw new MissingArgumentException("MissingArgumentException: Please select either '-b' for a bitransformer type, or '-seq' "
						+ "for a biotransformer sequence.");
			}
			if(commandLine.getOptionValue("s") != null && commandLine.getOptionValue("q") != null) {
					throw new IllegalArgumentException("IllegalArgumentException: The parameters '-s' and '-seq' are mutually "
							+ "exclusive. '-q' describes an order sequence of biotransformers to be applied, each for a specific number of steps");
			}					

			
			if(iFormat.contentEquals("smi")){
				String smi = commandLine.getOptionValue("ismi");
				try {
					singleInput = smiParser.parseSmiles(smi);		
				}catch(Exception e) {
					smi = smi.replace("\\", "").replace("/", "");
				}
				singleInput = smiParser.parseSmiles(smi);	
				SmilesGenerator sg = new SmilesGenerator(SmiFlavor.Isomeric);
					
			}
			else if(iFormat.contentEquals("mol")){
				inputFileName = commandLine.getOptionValue("imol");
				if(inputFileName == null){
					throw new MissingOptionException("\n\tPlease specify an input file name (Molfile or SDF). For more information, type java -jar biotransformer-" + version +".jar --help.");
				}
			}
			else if(iFormat.contentEquals("csv")) {
				inputFileName = commandLine.getOptionValue("icsv");
			}
			else if(iFormat.contentEquals("sdf")){
				inputFileName = commandLine.getOptionValue("isdf");
				if(inputFileName == null){
					throw new MissingOptionException("\n\tPlease specify an input file name (Molfile or SDF). For more information, type java -jar biotransformer-" + version +".jar --help.");
				}
			}
			else {
				throw new IllegalArgumentException("\n\tInvalid input format option(" + iFormat + ") entered. It must be one of 'ismi','imol', or 'isdf'. Type java -jar biotransformer-" + version +".jar --help for help.");
			}

			if(oFormat.contentEquals("csv")){
				outputF = commandLine.getOptionValue("ocsv");
				if(outputF == null){
					throw new MissingOptionException("\n\tPlease specify an output file name (CSV). For more information, type java -jar biotransformer-" + version +".jar --help.");
				}
			}			
			else if(oFormat.contentEquals("sdf")){
				outputF = commandLine.getOptionValue("osdf");
				if(outputF == null){
					throw new MissingOptionException("\n\tPlease specify an output file name (SDF). For more information, type java -jar biotransformer-" + version +".jar --help.");
				}
			}
			else {
				throw new IllegalArgumentException("\n\tInvalid output format option(" + oFormat + ") entered. It must be one of 'ocsv' or 'osdf'. Type java -jar biotransformer-" + version +".jar --help for help.");
			}

			if(task.contentEquals("cid")){
				
				if(metadata_input != null){
					
					if(biotransformerType != null) {
						if(SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ALLHUMAN){
							
							String[] mArr = metadata_input.trim().split(";");
							ArrayList<String> dmassesOrFormulas = new ArrayList<String>();
							
							for(int k = 0; k < mArr.length; k++){
								try{
									dmassesOrFormulas.add(mArr[k].trim());
								}
								catch(Exception e){
									System.err.println(e.getMessage());
								}
							}
							
							
							if (singleInput !=null){
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								if(oFormat.contentEquals("csv")){
									mtf.findAllHumanMetabolitesToCSV(singleInput, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, outputF, opt, cyp450Mode);
								}
								else if(oFormat.contentEquals("sdf")){
									mtf.findAllHumanMetabolites(singleInput, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, outputF, opt, cyp450Mode);
								}
							}
							else {
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
								IAtomContainerSet metabolites = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);
	
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									try {
										metabolites.add(mtf.findAllHumanMetabolites(atc, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, opt, cyp450Mode));
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}
									
								}
								
								if(oFormat.contentEquals("csv")){
									FileUtilities.saveAtomContainerSetToCSV(metabolites, outputF);
								}
								else if(oFormat.contentEquals("sdf")){							
									SDFWriter sdfWriter = new SDFWriter(new FileOutputStream(outputF));		
									sdfWriter.write(metabolites);
									sdfWriter.close();
								}
							}	
							
						}
						else if(SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ENV){
							String[] mArr = metadata_input.trim().split(";");
							ArrayList<String> dmassesOrFormulas = new ArrayList<String>();
							
							for(int k = 0; k < mArr.length; k++){
								try{
									dmassesOrFormulas.add(mArr[k].trim());
								}
								catch(Exception e){
									System.err.println(e.getMessage());
								}
							}
							
							
							if (singleInput !=null){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								
								if(oFormat.contentEquals("csv")){
									mtf.findAllEnvMicroMetabolitesToCSV(singleInput, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, outputF, opt);
								}
								else if(oFormat.contentEquals("sdf")){
									mtf.findAllEnvMicroMetabolites(singleInput, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, outputF, opt);
								}
							}
							else {
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
								IAtomContainerSet metabolites = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);
	
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									try {
										metabolites.add(mtf.findAllEnvMicroMetabolites(atc, dmassesOrFormulas, massToleranceThreshold, nrOfSteps, annotate, opt));
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}
									
								}							
								if(oFormat.contentEquals("csv")){
									FileUtilities.saveAtomContainerSetToCSV(metabolites, outputF);
								}
								else if(oFormat.contentEquals("sdf")){							
									SDFWriter sdfWriter = new SDFWriter(new FileOutputStream(outputF));		
									sdfWriter.write(metabolites);
									sdfWriter.close();
								}
							}					
						}
	
						else if(SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.SUPERBIO){

							String[] mArr = metadata_input.trim().split(";");
							ArrayList<String> dmassesOrFormulas = new ArrayList<String>();
							
							for(int k = 0; k < mArr.length; k++){
								try{
									dmassesOrFormulas.add(mArr[k].trim());
								}
								catch(Exception e){
									System.err.println(e.getMessage());
								}
							}
								
							if (singleInput !=null){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								
								if(oFormat.contentEquals("csv")){
									mtf.findSuperbioMetabolitesToCSV(singleInput, dmassesOrFormulas, massToleranceThreshold, annotate, outputF, opt, cyp450Mode);
								}
								else if(oFormat.contentEquals("sdf")){
									mtf.findSuperbioMetabolites(singleInput, dmassesOrFormulas, massToleranceThreshold, annotate, outputF, opt, cyp450Mode);
								}
								
								
							}
							else {
								MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
								IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
								IAtomContainerSet metabolites = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);
	
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									try {
										metabolites.add(mtf.findSuperbioMetabolites(atc, dmassesOrFormulas, massToleranceThreshold, annotate, opt, cyp450Mode));
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}
									
								}							
								if(oFormat.contentEquals("csv")){
									FileUtilities.saveAtomContainerSetToCSV(metabolites, outputF);
								}
								else if(oFormat.contentEquals("sdf")){							
									SDFWriter sdfWriter = new SDFWriter(new FileOutputStream(outputF));		
									sdfWriter.write(metabolites);
									sdfWriter.close();
								}
	
							}					
						}
						else{
							throw new IllegalArgumentException("\n\tFor metabolite identification, the biotransformer type must be either allHuman, superbio, or env.");
						}
					}
					else if(biotransformerSeqeuence != null) {
						String[] mArr = metadata_input.trim().split(";");
						ArrayList<String> dmassesOrFormulas = new ArrayList<String>();
						
						for(int k = 0; k < mArr.length; k++){
							try{
								dmassesOrFormulas.add(mArr[k].trim());
							}
							catch(Exception e){
								System.err.println(e.getMessage());
							}
						}		
						IAtomContainerSet metabolites = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);
						MetaboliteFinder mtf = new MetaboliteFinder(useDB, useSub);
						
						if (singleInput !=null){
							number_of_molecules++;
							
							metabolites.add(mtf.findMetabolitesFromSequence(singleInput, btq_for_mf, dmassesOrFormulas, massToleranceThreshold, annotate, opt, cyp450Mode));

							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
							if (containers.getAtomContainerCount()>0){
								containers = FileUtilities.parseSdf_or_CSV(inputFileName);					

								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									try {
										 metabolites.add(mtf.findMetabolitesFromSequence(atc,  btq_for_mf, dmassesOrFormulas, massToleranceThreshold, annotate, opt, cyp450Mode));
										successful_predictions++;
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}	
								}
							}				
						}
						
						if(oFormat.contentEquals("csv")){
							FileUtilities.saveAtomContainerSetToCSV(metabolites, outputF);
						}
						else if(oFormat.contentEquals("sdf")){							
							SDFWriter sdfWriter = new SDFWriter(new FileOutputStream(outputF));		
							sdfWriter.write(metabolites);
							sdfWriter.close();
						}
					}
				}
				else{
					throw new IllegalArgumentException("\n\tFor metabolite identification, you must enter a list of masses, and/or molecular formulas");
				}
				
			}
			else if(task.contentEquals("pred")){
				SmilesGenerator sg = new SmilesGenerator(SmiFlavor.Isomeric);
				if(biotransformerType != null) {
					if(SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ABIOTIC) {
						AbioticTransformer_rails abiotic_bt = new AbioticTransformer_rails(false, false);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if(singleInput != null) {
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;			
							number_of_molecules++;
							biotransformations = abiotic_bt.applyAbioticTransformationsChain(singleInput, true, true, nrOfSteps, scoreThreshold);
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
							if (containers.getAtomContainerCount()>0){
								containers = FileUtilities.parseSdf_or_CSV(inputFileName);					
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									System.out.println("Processing molecule with SMILES: " + sg.create(atc));
									if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;	
									try {
										//biotransformations.addAll(cyp450bt.predictCyp450BiotransformationChain(atc, true, true, nrOfSteps, scoreThreshold));
										//biotransformations.addAll(cyp450bt.predictCyp450BiotransformationsByMode(singleInput, cyp450Mode, true, true, scoreThreshold));
										biotransformations.addAll(abiotic_bt.applyAbioticTransformationsChain(singleInput, true, true, nrOfSteps, scoreThreshold));
										successful_predictions++;
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}
								}														
							}							
						}
						if(oFormat.contentEquals("csv")){
							abiotic_bt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							abiotic_bt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
					}
					if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.CYP450){
						//Cyp450BTransformer cyp450bt = new Cyp450BTransformer(BioSystemName.HUMAN, useDB);
						Cyp450BTransformer_rails cyp450bt = new Cyp450BTransformer_rails(BioSystemName.HUMAN, useDB, useSub);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();						
						if (singleInput !=null){							
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							//biotransformations = cyp450bt.predictCyp450BiotransformationChain(singleInput, true, true, nrOfSteps, scoreThreshold);
//							biotransformations = cyp450bt.predictCyp450BiotransformationsByMode(singleInput, cyp450Mode, true, true, scoreThreshold);
							biotransformations = cyp450bt.predictCyp450BiotransformationChainByMode(singleInput, true, true, nrOfSteps, scoreThreshold, cyp450Mode);
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
							if (containers.getAtomContainerCount()>0){
								containers = FileUtilities.parseSdf_or_CSV(inputFileName);					
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									System.out.println("Processing molecule with SMILES: " + sg.create(atc));
									if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
									try {
										//biotransformations.addAll(cyp450bt.predictCyp450BiotransformationChain(atc, true, true, nrOfSteps, scoreThreshold));
										//biotransformations.addAll(cyp450bt.predictCyp450BiotransformationsByMode(singleInput, cyp450Mode, true, true, scoreThreshold));
										biotransformations.addAll(cyp450bt.predictCyp450BiotransformationChainByMode(atc, true, true, nrOfSteps, scoreThreshold, cyp450Mode));
										successful_predictions++;
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
									}
								}						
								
							}				
						}
										
						if(oFormat.contentEquals("csv")){
							cyp450bt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							cyp450bt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
					}
					
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ECBASED) {
						//ECBasedBTransformer ecbt =  new ECBasedBTransformer(BioSystemName.HUMAN, useDB, useSub);
						ECBasedBTransformer_rails ecbt =  new ECBasedBTransformer_rails(BioSystemName.HUMAN, useDB, useSub);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							biotransformations = ecbt.simulateECBasedMetabolismChain(singleInput, true, true, nrOfSteps, scoreThreshold);
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
							if (containers.getAtomContainerCount()>0){
								containers = FileUtilities.parseSdf_or_CSV(inputFileName);
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									System.out.println("Processing molecule with SMILES: " + sg.create(atc));
									if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
									try {
										biotransformations.addAll(ecbt.simulateECBasedMetabolismChain(atc, true, true, nrOfSteps, scoreThreshold));
										successful_predictions++;
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
										continue;
									}										
								}	
							
							}				
						}
										
						if(oFormat.contentEquals("csv")){
							ecbt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							ecbt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
					}
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.HGUT){
						HGutBTransformer_rails hgut = new HGutBTransformer_rails(useDB, useSub);									
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							biotransformations = hgut.simulateGutMicrobialMetabolism(singleInput, true, true, nrOfSteps, scoreThreshold);
							successful_predictions++;
						}
						else {			
							IAtomContainerSet containers = FileUtilities.parseSdfAndAddTitles_or_CSV(inputFileName, hgut.inchiGenFactory);					
							if (containers.getAtomContainerCount()>0){
								for(IAtomContainer atc : containers.atomContainers()){
									number_of_molecules++;
									System.out.println("\n\nMolecule no. " + number_of_molecules);
									System.out.println("Processing molecule with SMILES: " + sg.create(atc));
									if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
									try {
										biotransformations.addAll(hgut.simulateGutMicrobialMetabolism(atc, true, true, nrOfSteps, scoreThreshold));
										successful_predictions++;
									}
									catch(Exception e) {
										System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
										continue;
									}
									
								}	
							}				
						}	
						if(oFormat.contentEquals("csv")){
							hgut.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							hgut.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}						
					}
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.PHASEII){
						//Phase2BTransformer phase2b = new Phase2BTransformer(BioSystemName.HUMAN, useDB, useSub);
						PhaseIIBTransformer_rails phase2b = new PhaseIIBTransformer_rails(BioSystemName.HUMAN, useDB, useSub);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							biotransformations = phase2b.applyPhase2TransformationsChainAndReturnBiotransformations(singleInput, true, true, true, nrOfSteps, scoreThreshold, p2Mode);
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdfAndAddTitles_or_CSV(inputFileName, phase2b.inchiGenFactory);					
							for(IAtomContainer atc : containers.atomContainers()){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								System.out.println("Processing molecule with SMILES: " + sg.create(atc));
								if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
								try {
									biotransformations.addAll(phase2b.applyPhase2TransformationsChainAndReturnBiotransformations(atc, true, true, true, nrOfSteps, scoreThreshold, p2Mode));
									successful_predictions++;
								}
								catch(Exception e) {
									System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
									continue;
								}
								
							}
						
						}
										
						if(oFormat.contentEquals("csv")){
							phase2b.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							phase2b.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
					}
					
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.SUPERBIO){
						if(nrOfSteps!=12){
							System.out.println("\n\n=======>The configutration is set for this simulation. No need to set a number of steps for the super human transformer.\n\n");
						}
						//HumanSuperBioTransformer hsbt = new HumanSuperBioTransformer();
						SimulateHumanMetabolism_rails hsbt = new SimulateHumanMetabolism_rails(cyp450Mode, p2Mode, useDB, "hmdb", false, 30, useSub);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							//biotransformations = hsbt.simulateHumanSuperbioMetabolism(singleInput, scoreThreshold, cyp450Mode);
							biotransformations.addAll(hsbt.simulateHumanMetabolism(singleInput, 4));
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdfAndAddTitles_or_CSV(inputFileName, hsbt.getInChIGenFactory());					
							for(IAtomContainer atc : containers.atomContainers()){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								System.out.println("Processing molecule with SMILES: " + sg.create(atc));
								if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
								try {
									//biotransformations.addAll(hsbt.simulateHumanSuperbioMetabolism(atc,scoreThreshold, cyp450Mode));
									biotransformations.addAll(hsbt.simulateHumanMetabolism(atc, 4));
									successful_predictions++;
								}
								catch(Exception e) {
									System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
									continue;
								}									
							}							
						}			
		
						if(oFormat.contentEquals("csv")){
							hsbt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							hsbt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
		
					}
					
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ALLHUMAN){
						//HumanSuperBioTransformer hsbt = new HumanSuperBioTransformer();
//						int cyp450Mode = 1;
						SimulateHumanMetabolism_rails hsbt = new SimulateHumanMetabolism_rails(cyp450Mode, p2Mode, useDB, "hmdb", false, 30, useSub);
						ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							biotransformations = hsbt.simulateHumanMetabolism(singleInput, nrOfSteps);
							//biotransformations = hsbt.predictAllHumanBiotransformationChain(singleInput, nrOfSteps, scoreThreshold, cyp450Mode);
							successful_predictions++;
						}
						else {
							IAtomContainerSet containers = FileUtilities.parseSdfAndAddTitles_or_CSV(inputFileName, hsbt.getInChIGenFactory());					
							//System.out.println("Nr. of molecules: " + containers.getAtomContainerCount() );
							for(IAtomContainer atc : containers.atomContainers()){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								System.out.println("Processing molecule with SMILES: " + sg.create(atc));
								if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
								try {
									//biotransformations.addAll(hsbt.predictAllHumanBiotransformationChain(atc, nrOfSteps, scoreThreshold, cyp450Mode));
									biotransformations.addAll(hsbt.simulateHumanMetabolism(atc, nrOfSteps));
									successful_predictions++;
								}
								catch(Exception e) {
									System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
									continue;
								}									
							}							
						}			
		
						if(oFormat.contentEquals("csv")){
							hsbt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
						}
						else if(oFormat.contentEquals("sdf")){
							hsbt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
						}
					}
					
					else if (SetupParameters.optionsToBtTypes.get(biotransformerType.toLowerCase()) == bType.ENV){
						EnvMicroBTransformer_rails ebt = new EnvMicroBTransformer_rails(useDB, useSub);
						
						if (singleInput !=null){
							System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
							if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
							number_of_molecules++;
							if(oFormat.contentEquals("csv")){		
								ebt.simulateEnvMicrobialDegradationAndSaveToCSV(singleInput, true, true, nrOfSteps, scoreThreshold, outputF, annotate);
								successful_predictions++;
							}
							else if(oFormat.contentEquals("sdf")){
								ebt.simulateEnvMicrobialDegradationAndSaveToSDF(singleInput, true, true, nrOfSteps, scoreThreshold, outputF, annotate);
								successful_predictions++;
							}
						}
						else {
							ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
							IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
							for(IAtomContainer atc : containers.atomContainers()){
								number_of_molecules++;
								System.out.println("\n\nMolecule no. " + number_of_molecules);
								System.out.println("Processing molecule with SMILES: " + sg.create(atc));
								if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
								try {
									biotransformations.addAll(ebt.applyEnvMicrobialTransformationsChain(atc, true, true, nrOfSteps, scoreThreshold));
									successful_predictions++;
								}
								catch(Exception e) {
									System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getMessage());
									continue;
								}
								
							}						
							
							if(oFormat.contentEquals("csv")){
								ebt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
							}
							else if(oFormat.contentEquals("sdf")){
								ebt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
							}					
						}						
					}
				}
				
				else if(biotransformerSeqeuence != null) {
					ArrayList<Biotransformation> biotransformations = new ArrayList<Biotransformation>();
					if (singleInput !=null){
						System.out.println("Processing molecule with SMILES: " + sg.create(singleInput));
						if(!ChemStructureExplorer.checkExceptions_queryInput(false, singleInput, massThreshold)) return;
						number_of_molecules++;
						biotransformations = biotransformerSeqeuence.runSequence(singleInput, scoreThreshold, cyp450Mode);
						successful_predictions++;
					}
					else {
						IAtomContainerSet containers = FileUtilities.parseSdf_or_CSV(inputFileName);
						if (containers.getAtomContainerCount()>0){
							containers = FileUtilities.parseSdf_or_CSV(inputFileName);					
							for(IAtomContainer atc : containers.atomContainers()){
								number_of_molecules++;
								System.out.println("\nMolecule no. " + number_of_molecules + ": " + atc.getProperty(CDKConstants.TITLE));
								System.out.println("Processing molecule with SMILES: " + sg.create(atc));
								if(!ChemStructureExplorer.checkExceptions_queryInput(true, singleInput, massThreshold)) continue;
								try {
									biotransformations.addAll(biotransformerSeqeuence.runSequence(atc, scoreThreshold, cyp450Mode));
									successful_predictions++;
								}
								catch(Exception e) {
									System.err.println("BioTransformer failed on molecule " + number_of_molecules + "\n" + e.getLocalizedMessage());
								}
								
							}						
							
						}				
					}
					UniversalBioTransformer hsbt = new UniversalBioTransformer(useDB, useSub);
					System.out.println("Format: " + oFormat);
					if(oFormat.contentEquals("csv")){
						System.out.println("saving to "+ outputF);
						hsbt.saveBioTransformationProductsToCSV(biotransformations, outputF, annotate);
					}
					else if(oFormat.contentEquals("sdf")){
						System.out.println("saving to "+ outputF);
						hsbt.saveBioTransformationProductsToSdf(biotransformations, outputF, annotate);
					}
					
				}
				System.out.println("Successfully completed metabolism prediction for " + successful_predictions + " out of " + number_of_molecules + " molecule(s).");
			}
			else {
				throw new IllegalArgumentException("You entered an invalid biotransformer option.\n"
						+ "Choose one of the following: ecbased, cyp450, hgut, phaseII, superbio, allHuman, or env.\nType java -jar biotransformer-" + version +".jar --help for help.");
			}			
		}		
		long end =System.currentTimeMillis();
		System.out.println("Total time consumption: " + (end - start));
	}
	
}




